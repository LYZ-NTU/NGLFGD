import numpy as np
from math import *
import matplotlib.pyplot as plt
import random
from sympy import *  # 新增导入sympy库
import time  # 新增导入time库

# 新增matplotlib配置
plt.rcParams['axes.linewidth'] = 1  # 图框宽度
plt.rcParams['figure.dpi'] = 500  # plt.show显示分辨率
font = {'family': 'serif',
        'serif': 'Times New Roman',
        'weight': 'normal',
        'size': 20}
plt.rc('font', **font)
from matplotlib import rcParams
config = {
    "font.size": 22,
    "mathtext.fontset":'stix',
}
rcParams.update(config)

random.seed(1)

# 参数设置
dim = 10
ordered = 0.9
k = 10
cons = (-1)**ceil(ordered)

# 计算系数
def coefficient(k, ordered):
    t = 1
    for i in range(0, k):
        t *= (ordered - i)
    t *= (-1)**k
    t = t / gamma(k + 1)
    return t

coef = [coefficient(i, ordered) for i in range(k)]

# 非因果梯度计算
def ncasual(coef, x, f):
    out = []
    for i in range(dim):
        d = np.zeros(dim)
        p1, p2 = [], []
        for j in range(k):
            d[i] = j
            p1.append(f(x - d))
            p2.append(f(x + d))
        tempg = sum(np.array(coef) * (np.array(p1) - np.array(p2)))
        out.append(tempg)
    return out

# 十维测试函数
def f(x):
    return sum((x)**2)  # 最优解为全0向量，这里你原注释有误，按代码逻辑是全0最优

# 初始化
x0 = [np.array([-1.93845074, 0.61316893, 0.55588845, 1.09837749, 0.57744463,
       0.88693044, -1.73273436, -1.69572682, -2.01954265, 2.37503699])]
f0 = [f(x0[0])]
num_iters = 100
lr = 0.01

# 优化过程
for i in range(num_iters):
    gradient = ncasual(coef, x0[i], f)
    new_x = x0[i] - lr * np.array(gradient)
    x0.append(new_x)
    f0.append(f(new_x))

# 转换为numpy数组便于处理
x_history = np.array(x0)  # 形状: (101, 10)

# 创建画布
plt.figure(figsize=(10, 8))  # 调整图像大小为10*8

# 参数变化图
colors = plt.cm.tab10(np.linspace(0, 1, dim))  # 10种颜色
lines = []
labels = []
for d in range(dim):
    line, = plt.plot(x_history[:, d],
                     color=colors[d],
                     linestyle='-',
                     linewidth=1.5,
                     alpha=0.8)
    lines.append(line)
    labels.append(f'Dim {d + 1}')

# 绘制目标参考线
for d in range(dim):
    plt.axhline(y=0, color='black', linestyle='--', alpha=0.5)

plt.xlabel('Step', fontsize=15)
plt.ylabel('X', fontsize=15)

# 设置图例标签竖着排列
plt.legend(lines, labels, loc='upper right', ncol=1, fontsize=15) 
plt.grid(True, alpha=0.3)
plt.tight_layout()

# 保存并显示图像
plt.savefig('parameter_trajectories.png', dpi=450, bbox_inches='tight')
plt.show()
